
Cursor movement

    h - move cursor left
    j - move cursor down
    k - move cursor up
    l - move cursor right
    w - jump forwards to the start of a word
    W - jump forwards to the start of a word (words can contain punctuation)
    e - jump forwards to the end of a word
    E - jump forwards to the end of a word (words can contain punctuation)
    b - jump backwards to the start of a word
    B - jump backwards to the start of a word (words can contain punctuation)
    0 - jump to the start of the line
    ^ - jump to the first non-blank character of the line
    $ - jump to the end of the line
    gg - go to the first line of the document
    G - go to the last line of the document
    5G - go to line 5
    fx - jump to next occurrence of character x
    tx - jump to before next occurrence of character x
    } - Jump to next paragraph (or function/block, when editing code)
    { - Jump to previous paragraph (or function/block, when editing code)

Tip Prefix a cursor movement command with a number to repeat it. For example, 4j
moves down 4 lines.
Insert mode - inserting/appending text

    i - insert before the cursor
    I - insert at the beginning of the line
    a - insert (append) after the cursor
    A - insert (append) at the end of the line
    o - append (open) a new line below the current line
    O - append (open) a new line above the current line
    ea - insert (append) at the end of the word
    Esc - exit insert mode

Editing

    r - replace a single character
    J - join line below to the current one
    cc - change (replace) entire line
    cw - change (replace) to the end of the word
    c$ - change (replace) to the end of the line
    s - delete character and substitute text
    S - delete line and substitute text (same as cc)
    xp - transpose two letters (delete and paste)
    u - undo
    Ctrl + r - redo
    . - repeat last command

Marking text (visual mode)

    v - start visual mode, mark lines, then do a command (like y-yank)
    V - start linewise visual mode
    o - move to other end of marked area
    Ctrl + v - start visual block mode
    O - move to other corner of block
    aw - mark a word
    ab - a block with ()
    aB - a block with {}
    ib - inner block with ()
    iB - inner block with {}
    Esc - exit visual mode

Visual commands

    > - shift text right
    < - shift text left
    y - yank (copy) marked text
    d - delete marked text
    ~ - switch case

Cut and paste

    yy - yank (copy) a line
    2yy - yank (copy) 2 lines
    yw - yank (copy) word
    y$ - yank (copy) to end of line
    p - put (paste) the clipboard after cursor
    P - put (paste) before cursor
    dd - delete (cut) a line
    2dd - delete (cut) 2 lines
    dw - delete (cut) word
    D - delete (cut) to the end of the line
    d$ - delete (cut) to the end of the line
    x - delete (cut) character

Exiting

    :w - write (save) the file, but don't exit
    :w !sudo tee % - write out the current file using sudo
    :wq or :x or ZZ - write (save) and quit
    :q - quit (fails if there are unsaved changes)
    :q! or ZQ - quit and throw away unsaved changes

Search and replace

    /pattern - search for pattern
    ?pattern - search backward for pattern
    \vpattern - 'very magic' pattern: non-alphanumeric characters are
interpreted as special regex symbols (no escaping needed)
    n - repeat search in same direction
    N - repeat search in opposite direction
    :%s/old/new/g - replace all old with new throughout file
    :%s/old/new/gc - replace all old with new throughout file with confirmations
    :noh - remove highlighting of search matches

Search in multiple files

    :vimgrep /pattern/ {file} - search for pattern in multiple files

e.g. :vimgrep /foo/ **/*

    :cn - jump to the next match
    :cp - jump to the previous match
    :copen - open a window containing the list of matches

Working with multiple files

    :e filename - edit a file in a new buffer
    :bnext or :bn - go to the next buffer
    :bprev or :bp - go to the previous buffer
    :bd - delete a buffer (close a file)
    :ls - list all open buffers
    :sp filename - open a file in a new buffer and split window
    :vsp filename - open a file in a new buffer and vertically split window
    Ctrl + ws - split window
    Ctrl + ww - switch windows
    Ctrl + wq - quit a window
    Ctrl + wv - split window vertically
    Ctrl + wh - move cursor to the left window (vertical split)
    Ctrl + wl - move cursor to the right window (vertical split)
    Ctrl + wj - move cursor to the window below (horizontal split)
    Ctrl + wk - move cursor to the window above (horizontal split)

Tabs

    :tabnew filename or :tabn filename - open a file in a new tab
    Ctrl + wT - move the current split window into its own tab
    gt or :tabnext or :tabn - move to the next tab
    gT or :tabprev or :tabp - move to the previous tab
    #gt - move to tab number #
    :tabmove # - move current tab to the #th position (indexed from 0)
    :tabclose or :tabc - close the current tab and all its windows
    :tabonly or :tabo - close all tabs except for the current one
    :tabdo command - run the command on all tabs (e.g. :tabdo q - closes all
opened tabs)

===============================================================================
FROM THOUGHTBOT
===============================================================================
http://vimcasts.org/

Getting around in vim is way quicker than just holding down the arrow keys. If you’re checking a bit of code and moving between it and somewhere else, you should set a mark. <letter> sets a mark, which you can jump to with '<letter>. Likewise, jumping to a specific line is as simple as :<line-number>. Got a failing test on line 146? :146 and you’re there. So you can set a mark for the line you’re on with ma, jump to line 20 with :20, fix your typo, then jump back with 'a, and you don’t have to remember exactly what line you’re on.

Thing is, when you do that, you may find your cursor is at the bottom of the screen, making further code hard to read. Fix that with z., which will zip the line the cursor is on to the middle of the window. You can also snap it to the top (z<ENTER>) or bottom (z-) just as easily.

When you cut a line with d (or yank it with y), the text you paste goes into a register. You can control the register it goes into by hitting "<letter> first. For example, "gyy will copy the current line into the g buffer. You can paste this text back by specifying the register before your p command: "gp.

Do you absolutely hate trailing whitespace or tabs in your files?

nnoremap <silent> <F5> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>:retab<CR>

Hitting F5 will clean out all that junk for you.

Vim can handle multiple files admirably using buffers, splits, and tabs.

Every file you open using :e or :tabe (or :E or gf or any other way of opening a new file) is added to your buffer list. See your buffer list with :buffers. You can switch to any buffer from that list with :buffer by specifying either the number or the file name (the file name will tab-complete). Close the current buffer and remove it from the list with :bd.

Go to the prior buffer with <Control>-^. In :buffers this file has a ’#’ in front of it.

For example:

:e ~/.vimrc      " edit the file ~/.vimrc
:e ~/.zshrc      " edit the file ~/.zshrc
<Control>-6      " switch back to ~/.vimrc
:buffers         " view all open buffers
:buffer .z  " switch to the ~/.zshrc buffer
:bd              " close the ~/.zshrc buffer and remove it from the list

Well what if we want both buffers visible at once? For this we want a split!

Horizontally split your screen using :split (or just :sp); vertically split it using :vsplit. Rails.vim gives you extra love here: all those :Rcontroller, :Rview, etc. commands can instead be :RScontroller or :RVview (S = :split, V = :vsplit).

Jump between splits using ^w followed by a motion. ^wj will jump to the split below the current one; ^wl to the split to the right; and so on. ^w^w will jump to the prior split (hold down ^w to bounce between things). Move them with ^wJ, ^wL, and so on.

 The Quick Rundown
key     description
^P  basic tab completion, pulling from a variety of sources
^N  the same as ^P but backward
^X ^L   whole line completion
^X ^O   syntax-aware omnicompletion

Play with these to get a feel for them. I use this mapping:

imap <Tab> <C-P>

The Keyboard Details

When using completion, a helpful menu pops up, showing all the potential matches. Within this menu you can press ^P or ^N to insert the next or prior word, respectively, or you can press one of those hard-to-reach arrow keys. The arrow key will select the word from the menu but will not replace your text with the selected word; at this point you can press ^L to enter the next character from the selected word.

When you’re happy with the selected word you can press ^Y; to give up entirely, press ^E. When you’re happy with the selected word but ready to keep typing other stuff, just keep typing. It’ll figure it out.

You can also insert the tokens after a completion, which is useful for when you forget that we invented abstractions 40 years ago. For example, let’s say you have this Gherkin:

Scenario: paint a wall blue
  Given I have some paint
  And I have a white wall
  When I paint the wall blue
  Then I should see "success"

And now you want to make a similar scenario, but for red:

Scenario: paint a wall red
  G^X^L^X^L^X^L^Wred
  T^X^L

The Configurations

You can change all of this. Here are three useful options with the settings that make me happy:

set complete=.,b,u,]

^P and ^N pull from a list of words computed by vim; the source of these completions is determined by the complete setting. In the above example it will pull from keywords in the current file, other buffers (closed or still open), and from the current tags file. More details: :h 'complete'

set wildmode=longest,list:longest

How vim should go about replacing your text. The above setting is closest to the default for zsh, which might be what you want. Other possiblities are listed at :h 'wildmode'.

set completeopt=menu,preview

This is the default, and it works just fine. It shows a menu and, if available, any additional tips such as the method signature or defining file. If you really want to change it, read up on the details at :h 'completeopt'.
Be Smarter

While the above configurations are useful for simple pleasures, we can make the configuration more intelligent by writing functions in vimscript. For example, in HTML vim should know that you can’t nest a div inside an a or that class is a valid attribute name but classic is not. Enter omnifunc.

There are five relevant omnifuncs that ship with vim: CSS, HTML, JavaScript, Ruby, andSQL. They are autoloaded for the relevant filetype, slower than ^P, and totally brilliant. They can fill in defined method names after . in Ruby, complete property names in CSS, automatically close the correct tag in HTML, or guess at table and column names inSQL.

Many other omnifunc definitions exist for other languages, and you can write your own. For more details see :h complete-functions.
But Wait, There’s More

This blog post is a tiny fraction of what’s available. Dictionaries, thesauri, tags, filenames, vim command names, and so much more are all documented under :h ins-completion.